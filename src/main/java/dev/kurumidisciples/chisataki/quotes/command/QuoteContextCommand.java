package dev.kurumidisciples.chisataki.quotes.command;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.sql.Timestamp;

import javax.imageio.ImageIO;

import dev.kurumidisciples.chisataki.commands.message.MessageCommand;
import dev.kurumidisciples.chisataki.enums.ChannelEnum;
import dev.kurumidisciples.chisataki.quotes.QuoteSettings;
import dev.kurumidisciples.chisataki.quotes.QuoteSettingsUtils;
import dev.kurumidisciples.chisataki.quotes.image.QuoteImageGenerator;
import dev.kurumidisciples.chisataki.quotes.quota.QuoteQuotaUtils;
import dev.kurumidisciples.chisataki.utils.ColorUtils;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.events.interaction.command.MessageContextInteractionEvent;
import net.dv8tion.jda.api.utils.FileUpload;

public class QuoteContextCommand extends MessageCommand  {
    
    public QuoteContextCommand(){
        super("Make it a Quote!");
    }

    @Override
    public void execute(MessageContextInteractionEvent event) {
        event.deferReply(true).queue();
        if (event.getTarget().getContentRaw().length() > 2000) {
            event.getHook().editOriginal("The message is too long to be a quote!").queue();
            return;
        }

        QuoteSettings settings = QuoteSettingsUtils.selectSettings(event.getGuild().getId());

        if (settings == null) {
            event.getHook().editOriginal("No settings found for this server!").queue();
            return;
        } 

        if(hasUserExceededQuota(event.getUser().getIdLong())) {
            event.getHook().editOriginal("You have exceeded the quote limit for the last 6 hours!").queue();
            return;
        }

        if (hasConflicts(event, settings, event.getMember())) {
            return;
        }

        event.getGuild().getThreadChannelById(1221538772785561600L).sendMessage("*Generating Quote...*").queue(message -> {
            QuoteSettings finalSettings = settings;
            Member member = event.getMember();
            event.getChannel().retrieveMessageById(event.getTarget().getId()).queue(message1 -> {
                BufferedImage quoteImage = QuoteImageGenerator.generateQuoteImage(finalSettings, message1);
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                try {
                    ImageIO.write(quoteImage, "png", baos);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                InputStream stream = new ByteArrayInputStream(baos.toByteArray());
                FileUpload file = FileUpload.fromData(stream, "quote.png");
                message.editMessageEmbeds(generateQuoteEmbed()).setContent(member.getAsMention() + " a quote has been generated for you!").setFiles(file).queue();
            });
        });

        event.getHook().editOriginal("A quote has been generated for you!").queue();

    }

    private static boolean hasConflicts(MessageContextInteractionEvent event, QuoteSettings settings, Member member) {
        if (!settings.isEnabled()){
            event.getHook().editOriginal("Quotes are currently not enabled for this server!").queue();
            return true;
        } else if (settings.isBoosterOnly() && !member.isBoosting()){
            event.getHook().editOriginal("Quotes are currently only enabled for boosters!").queue();
            return true;
        }
        return false;
    }

    private static boolean hasUserExceededQuota(long userid){
        // if the timestamp is within the last 6 hours, return true
        Timestamp timestamp = QuoteQuotaUtils.selectTimestamp(userid);
        if (timestamp == null){
            //insert the current timestamp into the database with the user id
            QuoteQuotaUtils.insertQuota(userid, System.currentTimeMillis());
            return false;
        } else if (System.currentTimeMillis() - timestamp.getTime() < 21600000){
            return true;
        } else {
            //update the timestamp to the current time
            QuoteQuotaUtils.insertQuota(userid, System.currentTimeMillis());
            return false;
        }
    }

    private static MessageEmbed generateQuoteEmbed(){
        return new EmbedBuilder()
                .setTitle("Here is your quote!")
                .setImage("attachment://quote.png")
                .setFooter("Quote image generated by Chisataki | Experimental Feature")
                .setColor(ColorUtils.PURPLE)
                .build();
    }
}
